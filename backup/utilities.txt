import React, { use, useRef, useState } from "react";
import Image from "next/image";
import { XIcon } from "@heroicons/react/solid";
import EmojiEmotionsIcon from "@mui/icons-material/EmojiEmotions";
import PhotoIcon from "@mui/icons-material/Photo";
import { Picker } from "emoji-mart";
import "emoji-mart/css/emoji-mart.css";
import { db } from "./firebase";
import { storage } from "./firebase";
import {
  addDoc,
  collection,
  doc,
  serverTimestamp,
  updateDoc,
} from "firebase/firestore";
import { getDownloadURL, ref, uploadString } from "firebase/storage";
import { useSession } from "next-auth/react";
function Utilities() {
  const { data: session } = useSession();
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);
  const filePickerRef = useRef(null);
  const [showEmojis, setShowEmojis] = useState(false);

  const sendPost = async () => {
    if (loading) return;
    setLoading(true);

    const docRef = await addDoc(collection(db, "posts"), {
      id: session.user.uid,
      username: session.user.name,
      userImg: session.user.image,
      tag: session.user.tag,
      text: input,
      timestamp: serverTimestamp(),
    });

    const imageRef = ref(storage, `posts/${docRef.id}/image`);

    if (selectedImage) {
      await uploadString(imageRef, selectedImage, "data_url").then(async () => {
        const downloadURL = await getDownloadURL(imageRef);
        await updateDoc(doc(db, "posts", docRef.id), {
          image: downloadURL,
        });
      });
    }

    setLoading(false);
    setInput("");
    setSelectedImage(null);
    setShowEmojis(false);
  };

  const addImageToPost = (e) => {
    const reader = new FileReader();
    if (e.target.files[0]) {
      reader.readAsDataURL(e.target.files[0]);
    }

    reader.onload = (readerEvent) => {
      setSelectedImage(readerEvent.target.result);
    };
  };

  const addEmoji = (e) => {
    let sym = e.unified.split("-");
    let codesArray = [];
    sym.forEach((el) => codesArray.push("0x" + el));
    let emoji = String.fromCodePoint(...codesArray);
    setInput(input + emoji);
  };

  return (
    <div
      className={`border border-gray-700 bg-[#202327]  p-3 flex space-x-3 mt-3 overflow-y-scroll scrollbar-hide rounded-2xl  ${
        loading && "opacity-60"
      }`}
    >
      <img
        src={session.user.image}
        alt="avatar"
        className="rounded-full cursor-pointer select-none h-11 w-11"
      />
      <div className="w-full divide-y divide-gray-700">
        <div className={`${selectedImage && "pb-7"} ${input && "space-y-2.5"}`}>
          <textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="What's on your mind ?"
            rows="2"
            className="bg-transparent outline-none text-sm text-[#d9d9d9]   placeholder-gray-500 tracking-wide w-full min-h-[50px]"
          />

          {selectedImage && (
            <div className="relative">
              <div
                className="absolute w-8 h-8 bg-[#15181c] hover:bg-[#272c26] bg-opacity-75 rounded-full flex items-center justify-center top-1 left  -1 cursor-pointer"
                onClick={() => setSelectedImage(null)}
              >
                <XIcon className="h-5 text-white" />
              </div>
              <img
                src={selectedImage}
                alt="uploaded image"
                className="object-contain select-none rounded-2xl max-h-80"
              />
            </div>  
          )}  
        </div>
        {!loading && (
          <div className="flex items-center justify-between pt-2.5">
            <div className="flex items-center">
              <div
                className="icon"
                onClick={() => filePickerRef.current.click()}
              >
                <PhotoIcon className="h-[22px] select-none" />
                <input
                  type="file"
                  ref={filePickerRef}
                  accept="image/*"
                  hidden
                  onChange={addImageToPost}
                />
              </div>

              <div className="icon" onClick={() => setShowEmojis(!showEmojis)}>
                <EmojiEmotionsIcon className="h-[22px] select-none" />
              </div>
          
              {showEmojis && (
                <Picker
                  onSelect={addEmoji}
                  style={{
                    position: "absolute",
                    marginTop: "465px",
                    marginLeft: -40,
                    maxWidth: "320px",
                    borderRadius: "20px",
                    userSelect: "none",
                  }}
                  theme="dark"
                />
              )}
            </div>
            <button
              className="bg-[#d9d9d9] text-black rounded-md px-4 py-1.5 font-bold shadow-md hover:bg-[#fff]
           disabled:hover:bg-[rgb(247,252,255)] disabled:opacity-50 disabled:cursor-default select-none "
              disabled={!input && !selectedImage}
              onClick={sendPost}
            >
              POST
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

export default Utilities;
